{"version":3,"sources":["index.js"],"names":["checkTasks","tasksArray","JSON","parse","window","localStorage","getItem","TaskApp","props","_this","Object","_home_mdougllas_Desktop_to_do_list_react_to_do_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_mdougllas_Desktop_to_do_list_react_to_do_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_mdougllas_Desktop_to_do_list_react_to_do_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","value","tasksList","handleChange","bind","_home_mdougllas_Desktop_to_do_list_react_to_do_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleSubmit","event","setState","target","preventDefault","hasTasks","tasks","length","newTask","task","status","push","setItem","stringify","alert","num","clear","taskList","splice","renderingTitle","renderingTasks","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","map","item","index","key","onClick","handleClick","title","alt","src","deleteTask","onSubmit","type","name","placeholder","onChange","React","Component","storageAvailable","ReactDOM","render","document","getElementById","href","rel"],"mappings":"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","file":"static/js/main.0165bad8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport storageAvailable from 'storage-available'\nimport './index.css';\n\n//Checking if we have tasks assigned on the browser's local storage\nfunction checkTasks ( ) {\n\n  let tasksArray = JSON.parse ( window.localStorage.getItem ( 'tasks' ) );\n  return ( tasksArray !== null ? tasksArray : false );\n\n};\n\n//Main app class\nclass TaskApp extends React.Component {\n\n  constructor ( props ) {\n\n    super ( props );\n\n    //Setting the state for the input and tasks array\n    this.state = {\n      value: '', //Tracking the input value\n      tasksList: checkTasks ( ) //Tracking the list of tasks\n    };\n\n    //Binding necessary methods\n    this.handleChange = this.handleChange.bind ( this );\n    this.handleSubmit = this.handleSubmit.bind ( this );\n\n  }\n\n  //Handling the user's input\n  handleChange ( event ) {\n\n    this.setState ( { value: event.target.value } );\n\n  };\n\n  //Handling the user's submit\n  handleSubmit ( event ) {\n\n    //Preventing form submit\n    event.preventDefault ( );\n    \n    //Checking for the browser's Local Storage for tasks\n    this.hasTasks = false;\n    this.tasks = JSON.parse ( window.localStorage.getItem ( 'tasks' ) );\n    this.tasks === null ? this.tasks = [ ] : this.hasTasks = true;\n    \n    if ( this.state.value.length >= 1 ) {\n\n      //Inserting new task to the list\n      let newTask = { task: this.state.value, status: 'Uncompleted' };\n      this.tasks.push ( newTask );\n      window.localStorage.setItem ( 'tasks', JSON.stringify ( this.tasks ) );\n\n    } else {\n\n      //User tried to submit without typing\n      alert('Please type a task on the text field.');\n\n    }\n    \n    //Defining the newer states\n    this.setState ( {\n      tasksList: checkTasks ( ),\n      value: '' //This is necessary for clearing the text input after submitting a task\n    } );\n\n  };\n\n  //Handling the toggle task completed / uncompleted\n  handleClick ( num ) {\n\n    let tasksArray = this.state.tasksList;\n    if ( tasksArray[ num ].status === 'Uncompleted' ) {\n\n      //Toggling the array\n      tasksArray[ num ].status = 'Completed';\n      \n      //Cleaning browser's local storage and inserting the updated array\n      window.localStorage.clear ( );\n      window.localStorage.setItem ( 'tasks', JSON.stringify ( tasksArray ) );\n      \n      //Reading the new tasks array and setting new state\n      this.setState( { taskList: checkTasks ( ) } );\n\n    } else {\n\n      //Toggling the array\n      tasksArray[ num ].status = 'Uncompleted';\n\n      //Cleaning browser's local storage and inserting the updated array\n      window.localStorage.clear ( );\n      window.localStorage.setItem ( 'tasks', JSON.stringify ( tasksArray ) );\n      \n      //Reading the new tasks array and setting new state\n      this.setState( { taskList: checkTasks ( ) } );\n\n    }\n\n  }\n\n  //Handling the task delete buttons\n  deleteTask ( num ) {\n\n    let tasksArray = checkTasks ( );\n    tasksArray.splice ( num, 1 ); //Removing the deleted task\n    window.localStorage.clear ( ); //Cleaning browser's local storage\n    if ( tasksArray.length < 1 ) {\n\n      //No tasks left, clear the browser's local storage and resetting the array\n      window.localStorage.clear ( );\n      tasksArray = checkTasks ( );\n\n    } else {\n\n      //Tasks left, insert the array on browser's local storage and resetting the array\n      window.localStorage.setItem ( 'tasks', JSON.stringify ( tasksArray ) );\n      tasksArray = checkTasks ( );\n\n    }\n    //Setting the newer state without the deleted task\n    this.setState ( { tasksList: checkTasks ( ) } );\n\n  };\n  \n  render ( ) {\n\n    //Render the tasks only if we have tasks assigned already\n    let renderingTitle, renderingTasks;\n    if ( checkTasks( ) !== false ) {\n\n      //Have tasks to render\n      renderingTitle = <h1 className = \"title\"> These are your tasks </h1>;\n      renderingTasks =\n        <div className = \"tasks-wrapper\">\n          <ul>\n            { checkTasks( ).map ( ( item, index ) => (\n              <li key = { index+1 } >\n                <span className = \"list-wrapper\">\n\n                  <span className = \"icons-wrapper\">\n\n                    <span className = \"task-status\" onClick = { ( ) => this.handleClick ( index ) } >\n                      {\n\n                        //This block only changes the completed / uncompleted images\n                        item.status === 'Uncompleted'\n                        ?\n                          <img title = \"Set task to completed\" alt = \"To Do Icon\" src = 'to-do-icon.png' />\n                        : \n                        <img title = \"Set task to uncompleted\" alt = \"Done Icon\" src = 'done-icon.png' />\n\n                      }\n                    </span>\n\n                    <span className = \"delete-task\" onClick = { ( ) => this.deleteTask ( index ) } >\n                      <img title = \"Delete task\" alt = \"Delete Icon\" src = 'delete-icon.png' />\n                    </span>\n\n                  </span>\n\n                  <span className = \"task-description\">\n                    { item.task }\n                  </span>\n                  \n                </span>\n\n              </li>\n            ) ) }\n          </ul>\n        </div>\n      ;\n\n    } else {\n\n      //No tasks to render\n      renderingTitle = <h1 className = \"title\"> You have no tasks. Create your first task! </h1>;\n\n    }\n\n    //Final render. It takes the variable created with renders from above to complete the full rendering\n    return (\n      <div className = \"wrapper\">\n        { renderingTitle }\n        { renderingTasks }\n        <div className = \"form-wrapper\">\n          <form onSubmit = { this.handleSubmit } >\n            <input type = \"text\" name = \"task\" placeholder = \"ADD A NEW TASK\" value = { this.state.value } onChange = { this.handleChange } />\n            <input type = \"submit\" value = \"Add Task\" />\n          </form>\n        </div>\n      </div>\n    );\n\n  };\n\n};\n\n//Checking if Local Storage is available to render the app\nif ( storageAvailable ( 'localStorage' ) ) {\n\n  //Available, render the app\n  ReactDOM.render (\n    <TaskApp />,\n    document.getElementById ( 'root' )\n  );\n\n} else {\n\n  //No local storage on the browser, send user to Google Chrome\n  ReactDOM.render (\n    <h1>\n      This app needs the browser's Local Storage in order to work. Please, install\n      <a href = \"https://www.google.com/chrome\" target = \"_blank\" rel = \"noopener noreferrer\"> Google Chrome </a>\n      to use this app.\n    </h1>,\n    document.getElementById ( 'root' )\n  );\n\n}"],"sourceRoot":""}